<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>星空</title>
  <subtitle>记录浩瀚星空的点滴</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-02-25T11:10:17.486Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Wang Kun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>算法与数据结构之排序</title>
    <link href="http://yoursite.com/2016/06/05/sorting/"/>
    <id>http://yoursite.com/2016/06/05/sorting/</id>
    <published>2016-06-05T09:09:28.000Z</published>
    <updated>2017-02-25T11:10:17.486Z</updated>
    
    <content type="html"><![CDATA[<p>排序根据算法的复杂度（平均复杂度）可以大致分为一下三类： </p>
<ol>
<li>$O(n^2)$：冒泡排序（Bubble Sort），插入排序（Inserttion Sort），选择排序（Selection Sort）</li>
<li>$O(nlogn)$：归并排序（Merge Sort），堆排序（Heap Sort），快速排序（Quick Sort）</li>
<li>$O(n)$：计数排序（Counting Sort），基数排序（Radix Sort）</li>
</ol>
<p>排序根据算法的稳定性（对于相同的元素是否能够在排序前后保证相对顺序），可以两类：</p>
<ol>
<li>稳定排序：冒泡排序（Bubble Sort），插入排序（Inserttion Sort），归并排序（Merge Sort），计数排序（Counting Sort），计数排序（Counting Sort）</li>
<li>不稳定排序：选择排序（Selection Sort），快速排序（Quick Sort），堆排序（Heap Sort）</li>
</ol>
<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>冒泡排序是模拟气泡从水底部上浮的过程，对于一个待排序的序列而言，较小的数会一直向上“浮”，直至所有的较小的数都在较大数的上面（左边），就完成了排序。以下为Java实现， 可以看出冒泡排序是稳定排序。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = nums.length - <span class="number">2</span>; j &gt;= <span class="number">0</span>; j--) &#123;</div><div class="line">            <span class="keyword">if</span>(nums[j] &gt; nums[j+<span class="number">1</span>]) &#123;</div><div class="line">                <span class="keyword">int</span> tmp = nums[j+<span class="number">1</span>];</div><div class="line">                nums[j+<span class="number">1</span>] = nums[j];</div><div class="line">                nums[j] = tmp;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p>插入排序主要是通过将当前元素插入到前面已经排好序的序列当中来完成排序。以下为Java实现。插入排序有一种双排的实现方式，每次考虑两个元素$a$, $b$$（a&gt;b）$，先排好$a$，接着从$a$的位置排$b$，可以减少比较次数。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertionSort</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &gt; <span class="number">0</span>; j--) &#123;</div><div class="line">            <span class="keyword">if</span>(nums[j-<span class="number">1</span>] &gt; nums[j]) &#123;</div><div class="line">                <span class="keyword">int</span> tmp = nums[j];</div><div class="line">                nums[j] = nums[j-<span class="number">1</span>];</div><div class="line">                nums[j-<span class="number">1</span>] = tmp;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>每次选择未排序序列的最小值，追加到已排好序列的末端。一下为Java实现，选择排序为不稳定排序，如3，3，1。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">selectionSort</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</div><div class="line">         <span class="keyword">int</span> min = nums[i], pos = i;</div><div class="line">         <span class="keyword">for</span>(<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; nums.length; j++) &#123;</div><div class="line">             <span class="keyword">if</span>(nums[j] &lt; min) &#123;</div><div class="line">                 min = nums[j];  pos = j;</div><div class="line">             &#125;</div><div class="line">         &#125;</div><div class="line">         <span class="keyword">if</span>(pos != i) &#123;</div><div class="line">             <span class="keyword">int</span> tmp = nums[i];</div><div class="line">             nums[i] = nums[pos];</div><div class="line">             nums[pos] = tmp;</div><div class="line">         &#125;</div><div class="line">     &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p>归并排序，从名字上就可以大致看出来有归一合并的过程。将n长度的排序问题分解成长度相等$（\frac n2， n-\frac n2）$的排序子问题，之后将子问题的结果（两个排好序的子序列）合并成一个序列，完成排序。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</div><div class="line">     <span class="keyword">int</span> mid = (left + right)/<span class="number">2</span>;</div><div class="line">     <span class="keyword">int</span>[] tmp = <span class="keyword">new</span> <span class="keyword">int</span>[right - left + <span class="number">1</span>];</div><div class="line">     <span class="keyword">int</span> cnta = left, cntb = mid+<span class="number">1</span>, cnt = <span class="number">0</span>;</div><div class="line">     <span class="keyword">while</span> (cnta &lt;= mid &amp;&amp; cntb &lt;= right) &#123;</div><div class="line">         <span class="keyword">if</span>(nums[cnta] &gt; nums[cntb])  tmp[cnt++] = nums[cntb++];</div><div class="line">         <span class="keyword">else</span>                         tmp[cnt++] = nums[cnta++];</div><div class="line">     &#125;</div><div class="line">     <span class="keyword">while</span> (cnta &lt;= mid)  tmp[cnt++] = nums[cnta++];</div><div class="line">     <span class="keyword">while</span> (cntb &lt;= right)   tmp[cnt++] = nums[cntb++];</div><div class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i = left; i &lt;= right; i++)  nums[i] = tmp[i-left];</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</div><div class="line">     <span class="keyword">if</span>(left &gt;= right)   <span class="keyword">return</span>;</div><div class="line">     <span class="keyword">int</span> mid = (left + right)/<span class="number">2</span>;</div><div class="line">     mergeSort(nums, left, mid);</div><div class="line">     mergeSort(nums, mid+<span class="number">1</span>, right);</div><div class="line">     merge(nums, left, right);</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><p>堆排序是利用最大堆的特性（根是所有对结点中键值最大的），首先构建堆（$O(n)$），每次将根与堆的最后一个元素进行交换，并且将堆的大小减少1（并没有把最后的堆元素删除），调整堆使其保证最大堆的特性，当堆的大小减为1时，再层次遍历堆，完成排序。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//建堆</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">buildHeap</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> size)</span> </span>&#123;  </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = (size &gt;&gt;&gt;<span class="number">1</span>); i &gt;= <span class="number">1</span>; i--) &#123;</div><div class="line">        heapify(nums, size, i);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//调整堆</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapify</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> size, <span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> l = i &lt;&lt; <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> r = (i &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> largest  = i;</div><div class="line">    <span class="keyword">if</span>(l &lt;= size &amp;&amp; nums[l] &gt; nums[i])</div><div class="line">        largest = l;</div><div class="line">    <span class="keyword">if</span>(r &lt;= size &amp;&amp; nums[r] &gt; nums[largest])</div><div class="line">        largest = r;</div><div class="line">    <span class="keyword">if</span>(largest != i) &#123;</div><div class="line">        <span class="keyword">int</span> tmp = nums[largest];</div><div class="line">        nums[largest] = nums[i];</div><div class="line">        nums[i] = tmp;</div><div class="line">        heapify(nums, size, largest);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//堆排序</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapSort</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> size)</span> </span>&#123;        <span class="comment">//nums从1开始, size是数据的实际大小（不包括下标为0的元素）</span></div><div class="line">    buildHeap(nums, size);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = size; i &gt;= <span class="number">2</span>; i--) &#123;</div><div class="line">        <span class="keyword">int</span> tmp = nums[i];</div><div class="line">        nums[i] = nums[<span class="number">1</span>];</div><div class="line">        nums[<span class="number">1</span>] = tmp;</div><div class="line">        heapify(nums, i-<span class="number">1</span>, <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>和归并排序相同，快排采用分治的策略，在序列中选取一个$pivot$， 把一个序列分为两个子序列，使得一个序列的所有值都小于等于$pivot$， 另一个序列的所有值都大于等于$pivot$，之后递归处理两个子序列。快排是不稳定排序，如3,4,5,4,1,2，$pivot为3$。以下为Java实现。快排的平均复杂度为$O(nlogn)$，最坏的复杂度为$O(n^2)$。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> temp = nums[x];</div><div class="line">    nums[x] = nums[y];</div><div class="line">    nums[y] = temp;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (start &gt;= end)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">int</span> pivot = nums[start];</div><div class="line">    <span class="keyword">int</span> left = start, right = end-<span class="number">1</span>;</div><div class="line">    swap(nums, start, end);</div><div class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</div><div class="line">        <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left] &lt; pivot)</div><div class="line">            left++;</div><div class="line">        <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[right] &gt;= pivot)</div><div class="line">            right--;</div><div class="line">        <span class="keyword">if</span>(left &lt; right)</div><div class="line">            swap(nums, left, right);</div><div class="line">    &#125;</div><div class="line">    swap(nums, left, end);</div><div class="line">    quickSort(nums, start, left - <span class="number">1</span>);</div><div class="line">    quickSort(nums, left + <span class="number">1</span>, end);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h2><p>计数排序直接使用一个数组来保存该元素出现的次数，之后对所有的计数进行累加，反向填充目标数组。一下为Java实现。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span>[] countingSort(<span class="keyword">int</span>[] nums) &#123;</div><div class="line">    <span class="keyword">int</span>[] ans = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</div><div class="line">    <span class="keyword">int</span> min =  nums[<span class="number">0</span>], max = nums[<span class="number">0</span>];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</div><div class="line">        min = Math.min(min, nums[i]);</div><div class="line">        max = Math.max(max, nums[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span>[] c = <span class="keyword">new</span> <span class="keyword">int</span>[max-min+<span class="number">1</span>];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</div><div class="line">        c[nums[i] -  min]++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; c.length; i++)</div><div class="line">        c[i] += c[i-<span class="number">1</span>];</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = nums.length-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</div><div class="line">        ans[--c[nums[i]-min]] = nums[i];</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h2><p>基数排序是一种非比较型整数排序算法，其原理是将整数按位数切割成不同的数字，然后按每个位数进行排序。其复杂度为$O(dn)$，$d$为整数位数。一下为Java代码实现。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxbit</span><span class="params">(<span class="keyword">int</span> nums[], <span class="keyword">int</span> n)</span> <span class="comment">//辅助函数，求数据的最大位数</span></span></div><div class="line"> &#123;</div><div class="line">     <span class="keyword">int</span> maxnums = nums[<span class="number">0</span>];		<span class="comment">///&lt; 最大数</span></div><div class="line">     <span class="comment">/// 先求出最大数，再求其位数，这样有原先依次每个数判断其位数，稍微优化点。</span></div><div class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i)</div><div class="line">     &#123;</div><div class="line">         <span class="keyword">if</span> (maxnums &lt; nums[i])</div><div class="line">             maxnums = nums[i];</div><div class="line">     &#125;</div><div class="line">     <span class="keyword">int</span> d = <span class="number">1</span>;</div><div class="line">     <span class="keyword">int</span> p = <span class="number">10</span>;</div><div class="line">     <span class="keyword">while</span> (maxnums &gt;= p)</div><div class="line">     &#123;</div><div class="line">         p *= <span class="number">10</span>;</div><div class="line">         ++d;</div><div class="line">     &#125;</div><div class="line">     <span class="keyword">return</span> d;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">void</span> <span class="title">radixsort</span><span class="params">(<span class="keyword">int</span> nums[], <span class="keyword">int</span> n)</span> <span class="comment">//基数排序</span></span></div><div class="line"> &#123;</div><div class="line">     <span class="keyword">int</span> d = maxbit(nums, n);</div><div class="line">     <span class="keyword">int</span>[] tmp = <span class="keyword">new</span> <span class="keyword">int</span>[n];</div><div class="line">     <span class="keyword">int</span>[] count = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>]; <span class="comment">//计数器</span></div><div class="line">     <span class="keyword">int</span> i, j, k;</div><div class="line">     <span class="keyword">int</span> radix = <span class="number">1</span>;</div><div class="line">     <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= d; i++) <span class="comment">//进行d次排序</span></div><div class="line">     &#123;</div><div class="line">         <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++)</div><div class="line">             count[j] = <span class="number">0</span>; <span class="comment">//每次分配前清空计数器</span></div><div class="line">         <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; n; j++)</div><div class="line">         &#123;</div><div class="line">             k = (nums[j] / radix) % <span class="number">10</span>; <span class="comment">//统计每个桶中的记录数</span></div><div class="line">             count[k]++;</div><div class="line">         &#125;</div><div class="line">         <span class="keyword">for</span>(j = <span class="number">1</span>; j &lt; <span class="number">10</span>; j++)</div><div class="line">             count[j] = count[j - <span class="number">1</span>] + count[j]; <span class="comment">//将tmp中的位置依次分配给每个桶</span></div><div class="line">         <span class="keyword">for</span>(j = n - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) <span class="comment">//将所有桶中记录依次收集到tmp中</span></div><div class="line">         &#123;</div><div class="line">             k = (nums[j] / radix) % <span class="number">10</span>;</div><div class="line">             tmp[count[k] - <span class="number">1</span>] = nums[j];</div><div class="line">             count[k]--;</div><div class="line">         &#125;</div><div class="line">         <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; n; j++) <span class="comment">//将临时数组的内容复制到nums中</span></div><div class="line">             nums[j] = tmp[j];</div><div class="line">         radix = radix * <span class="number">10</span>;</div><div class="line">     &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<h2 id="延伸阅读"><a href="#延伸阅读" class="headerlink" title="延伸阅读"></a>延伸阅读</h2><a href="http://mindhacks.cn/2008/06/13/why-is-quicksort-so-quick/" target="_blank" rel="external">数学之美番外篇：快排为什么那样快</a>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;排序根据算法的复杂度（平均复杂度）可以大致分为一下三类： &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;$O(n^2)$：冒泡排序（Bubble Sort），插入排序（Inserttion Sort），选择排序（Selection Sort）&lt;/li&gt;
&lt;li&gt;$O(nlogn)$：归并排序
    
    </summary>
    
      <category term="算法与数据结构" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
